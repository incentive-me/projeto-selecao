"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
const cors_1 = __importDefault(require("cors"));
const user_usecase_1 = require("./application/user.usecase");
const user_repository_1 = __importDefault(require("./infra/repository/user.repository"));
const user_controller_1 = require("./presentation/user.controller");
const middleware_1 = require("./presentation/middleware");
const balance_controller_1 = require("./presentation/balance.controller");
const balance_usecase_1 = require("./application/balance.usecase");
const balance_repository_1 = __importDefault(require("./infra/repository/balance.repository"));
const payment_usecase_1 = require("./application/payment.usecase");
const payment_controller_1 = require("./presentation/payment.controller");
const payment_repository_1 = require("./infra/repository/payment.repository");
const app = (0, express_1.default)();
app.use(express_1.default.json());
app.use((0, cors_1.default)());
const userRepo = new user_repository_1.default();
const userUseCase = new user_usecase_1.UserUseCase(userRepo);
const userController = new user_controller_1.UserController(userUseCase);
const balanceRepo = new balance_repository_1.default();
const balanceUseCase = new balance_usecase_1.BalanceUseCase(balanceRepo);
const balanceController = new balance_controller_1.BalanceController(balanceUseCase);
const paymentRepository = new payment_repository_1.PaymentRepository();
const paymentUseCase = new payment_usecase_1.PaymentUseCase(paymentRepository);
const paymentController = new payment_controller_1.PaymentController(paymentUseCase);
app.post("/user", (req, res) => userController.CreateUser(req, res));
app.get("/user", middleware_1.middlewareJWT, (req, res) => userController.GetUserById(req, res));
app.post("/login", (req, res) => userController.LoginUser(req, res));
app.delete("/balance/:id", middleware_1.middlewareJWT, (req, res) => balanceController.DeleteBalanceController(req, res));
app.patch("/balance", middleware_1.middlewareJWT, (req, res) => balanceController.UpdateBalanceNameController(req, res));
app.get("/balance", middleware_1.middlewareJWT, (req, res) => balanceController.GetAllBalancesController(req, res));
app.post("/balance", middleware_1.middlewareJWT, (req, res) => balanceController.CreateBalanceController(req, res));
app.get("/payment", middleware_1.middlewareJWT, (req, res) => paymentController.GetAllPayments(req, res));
app.post("/payment", middleware_1.middlewareJWT, (req, res) => paymentController.CreatePayment(req, res));
app.delete("/payment/:id", middleware_1.middlewareJWT, (req, res) => paymentController.DeletePayment(req, res));
app.patch("/payment", middleware_1.middlewareJWT, (req, res) => paymentController.UpdatePaymentName(req, res));
console.log(process.env);
app.listen(3001, () => {
    console.log("Server is running on port 3001");
});
